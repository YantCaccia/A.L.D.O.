"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ref_1 = __importDefault(require("ref"));
const ApiSubset_1 = __importDefault(require("../ApiSubset"));
const DialogFlow_1 = __importDefault(require("./DialogFlow"));
const enums = __importStar(require("../types/enums"));
/**
 * The Dialog API subset.
 */
class Dialog extends ApiSubset_1.default {
    constructor(protocolHandler, call, options) {
        super(protocolHandler, call, options, 'hermes_protocol_handler_dialogue_facade');
        this.activeSessions = new Set();
        this.publishEvents = {
            start_session: {
                fullEventName: 'hermes_dialogue_publish_start_session_json'
            },
            continue_session: {
                fullEventName: 'hermes_dialogue_publish_continue_session_json'
            },
            end_session: {
                fullEventName: 'hermes_dialogue_publish_end_session_json'
            },
            configure: {
                fullEventName: 'hermes_dialogue_publish_configure_json'
            }
        };
        this.publishMessagesList = undefined;
        this.subscribeEvents = {
            'intent/': {
                fullEventName: 'hermes_dialogue_subscribe_intent_json',
                additionalArguments: eventName => [
                    ref_1.default.allocCString(eventName.substring(7))
                ]
            },
            intents: {
                fullEventName: 'hermes_dialogue_subscribe_intents_json'
            },
            intent_not_recognized: {
                fullEventName: 'hermes_dialogue_subscribe_intent_not_recognized_json'
            },
            session_ended: {
                fullEventName: 'hermes_dialogue_subscribe_session_ended_json'
            },
            session_queued: {
                fullEventName: 'hermes_dialogue_subscribe_session_queued_json'
            },
            session_started: {
                fullEventName: 'hermes_dialogue_subscribe_session_started_json'
            }
        };
        this.subscribeMessagesList = undefined;
    }
    destroy() {
        this.call('hermes_drop_dialogue_facade', this.facade);
    }
    /**
     * Sets a dialog flow up.
     *
     * @param intent - Starting intent name.
     * @param action - Action to perform when the starting intent is triggered.
     */
    flow(intent, action) {
        return this.flows([{ intent, action }]);
    }
    /**
     * Sets a dialog flow up with multiple starting intents.
     *
     * @param intents - An array of { intent, action } objects.
     */
    flows(intents) {
        intents.forEach(({ intent, action }) => {
            this.on(`intent/${intent}`, (message) => {
                const sessionId = message.sessionId;
                // If this particular session is already in progress - prevent
                if (this.activeSessions.has(sessionId))
                    return;
                const flow = new DialogFlow_1.default(this, sessionId, () => {
                    this.activeSessions.delete(sessionId);
                });
                this.activeSessions.add(sessionId);
                return flow.start(action, message);
            });
        });
    }
    /**
     * Creates a dialog flow that will trigger when the target session starts.
     * Useful when initiating a session programmatically.
     *
     * @param id : An id that should match the customData field of the started session.
     * @param action : The action to execute on session startup.
     */
    sessionFlow(id, action) {
        const listener = (message) => {
            const customData = message.customData;
            const sessionId = message.sessionId;
            if (customData !== id)
                return;
            this.off('session_started', listener);
            const flow = new DialogFlow_1.default(this, sessionId, () => {
                this.activeSessions.delete(sessionId);
            });
            this.activeSessions.add(sessionId);
            return flow.start(action, message, { sessionStart: true });
        };
        this.on('session_started', listener);
    }
}
exports.default = Dialog;
/**
 * Dialog enumerations.
 */
Dialog.enums = {
    grain: enums.grain,
    precision: enums.precision,
    initType: enums.initType,
    terminationType: enums.terminationType,
    slotType: enums.slotType
};
//# sourceMappingURL=index.js.map