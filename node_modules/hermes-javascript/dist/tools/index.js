"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_int64_1 = __importDefault(require("node-int64"));
/**
 * Prevents the process from terminating.
 * @param timer - The interval of time between loop iterations.
 */
function keepAlive(timer = 60000) {
    return setInterval(() => { }, timer);
}
exports.keepAlive = keepAlive;
/**
 * Stops the keepAlive loop.
 * @param keepAliveRef - A reference to an existing keepAlive loop.
 */
function killKeepAlive(keepAliveRef) {
    clearInterval(keepAliveRef);
}
exports.killKeepAlive = killKeepAlive;
/**
 * Generic C struct to JS object casting method.
 * @param struct - A "C structure" object exposed by the "ref" module.
 * @param customKeysCasting - Allows to specify the behaviour for keys mapping to a sub structure.
 */
function cast(struct, customKeysCasting = {}) {
    // console.log('before ', struct)
    if (struct instanceof Buffer) {
        struct = struct.deref();
    }
    const obj = Object.assign({}, struct.toObject());
    // console.log('after ', obj)
    const keys = Object.keys(obj);
    for (let key of keys) {
        // console.log('key: ', key)
        const value = obj[key];
        try {
            const ref = value && value.ref && value.ref();
            const valueType = ref && ref.type.name;
            if (value instanceof Buffer && value.isNull() || ref && ref.isNull()) {
                obj[key] = null;
                continue;
            }
            if (customKeysCasting[key]) {
                obj[key] = customKeysCasting[key](value, struct);
                continue;
            }
            // console.log('value: ', value)
            // console.log('valueType:', valueType)
            if (!ref) {
                continue;
            }
            else if (valueType === 'StructType*' || valueType === 'StructType') {
                // console.log('beforeStructTypeCall ', key, ' > ', valueType)
                obj[key] = module.exports.cast(value);
            }
            else if (valueType === 'char*' || valueType === 'string') {
                obj[key] = value.readCString();
            }
            else if (valueType === 'int64') {
                obj[key] = new node_int64_1.default(value);
            }
            else {
                obj[key] = value.deref();
            }
        }
        catch (error) {
            // eslint-disable-next-line
            console.error(error);
            obj[key] = null;
        }
        // console.log(key, ' -> ', obj[key])
    }
    return obj;
}
exports.cast = cast;
//# sourceMappingURL=index.js.map